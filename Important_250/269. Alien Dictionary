//
graph -> indegree -> BFS!!!
public static String alienOrder(String[] words) {
    if (words == null || words.length == 0) return "";
    HashMap<Character, HashSet<Character>> map = new HashMap<>();
    int[] indegree = new int[26];
    int count = 0; //types of lowercase letters
    StringBuilder res = new StringBuilder();
    
    //record types of lowercase letters
    for (String s : words) {
        for (char c : s.toCharArray()) {
            if (indegree[c - 'a'] == 0) {
                count++;
                indegree[c - 'a'] = 1;
            }
        }
    }
    
    // create indegree
    for (int i = 0; i < words.length - 1; i++) {
        char[] cur = words[i].toCharArray();
        char[] next = words[i + 1].toCharArray();
        int len = Math.min(cur.length, next.length);
        for (int j = 0; j < len; j++) {
            if (cur[j] != next[j]) {
                if (!map.containsKey(cur[j])) {
                    map.put(cur[j], new HashSet<>());
                }
                if (map.get(cur[j]).add(next[j])) {
                    indegree[next[j] - 'a']++;
                }
                break;
            }
        }
    }
    
    //BFS
    Queue<Character> queue = new LinkedList<>();
    for (int i = 0; i < 26; i++) {
        if (indegree[i] == 1) {
            queue.offer((char)(i + 'a'));
        }
    }
    
    while (!queue.isEmpty()) {
        char c = queue.poll();
        res.append(c);
        if (map.containsKey(c)) {
            for (char ch : map.get(c)) {
                if (--indegree[ch - 'a'] == 1) {
                    queue.offer(ch);
                }
            }
        }
    }
    if (res.length() != count) return ""; // w->e->r->t   res = "w"
                                          //     \ f /
    return res.toString();
}
